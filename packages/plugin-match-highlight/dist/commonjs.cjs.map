{"version":3,"sources":["../src/commonjs.cts"],"sourcesContent":["// @ts-expect-error Ignore broken resolution - This errors when using tsconfig.cjs.json\nimport type { AnyOrama } from '@orama/orama'\n\nimport type {\n  afterInsert as esmAfterInsert,\n  OramaWithHighlight,\n  searchWithHighlight as esmSearchWithHighlight,\n  saveWithHighlight as esmSaveWithHighlight,\n  loadWithHighlight as esmLoadWithHighlight\n  // @ts-expect-error Ignore broken resolution - This errors when using tsconfig.cjs.json\n} from './index.js'\n\nexport interface OramaPluginMatchHighlight {\n  afterInsert: typeof esmAfterInsert\n  searchWithHighlight: typeof esmSearchWithHighlight\n}\n\nexport type RequireCallback = (err: Error | undefined, orama?: OramaPluginMatchHighlight) => void\n\nlet _esmAfterInsert: typeof esmAfterInsert\nlet _esmSearchWithHighlight: typeof esmSearchWithHighlight\nlet _esmSaveWithHighlight: typeof saveWithHighlight\nlet _esmLoadWithHighlight: typeof loadWithHighlight\n\nexport async function afterInsert<T extends AnyOrama>(\n  this: T | OramaWithHighlight<T>,\n  ...args: Parameters<typeof esmAfterInsert>\n): ReturnType<typeof esmAfterInsert> {\n  if (!_esmAfterInsert) {\n    const imported = await import('./index.js')\n    _esmAfterInsert = imported.afterInsert\n  }\n\n  return _esmAfterInsert.apply(this, args)\n}\n\nexport async function searchWithHighlight(\n  ...args: Parameters<typeof esmSearchWithHighlight>\n): ReturnType<typeof esmSearchWithHighlight> {\n  if (!_esmSearchWithHighlight) {\n    const imported = await import('./index.js')\n    _esmSearchWithHighlight = imported.searchWithHighlight\n  }\n\n  return _esmSearchWithHighlight(...args)\n}\n\nexport async function saveWithHighlight(\n  ...args: Parameters<typeof esmSaveWithHighlight>\n): ReturnType<typeof esmSaveWithHighlight> {\n  if (!_esmSaveWithHighlight) {\n    const imported = await import('./index.js')\n    _esmSaveWithHighlight = imported.saveWithHighlight\n  }\n\n  return _esmSaveWithHighlight(...args)\n}\n\nexport async function loadWithHighlight(\n  ...args: Parameters<typeof esmLoadWithHighlight>\n): ReturnType<typeof esmLoadWithHighlight> {\n  if (!_esmLoadWithHighlight) {\n    const imported = await import('./index.js')\n    _esmLoadWithHighlight = imported.loadWithHighlight\n  }\n\n  return _esmLoadWithHighlight(...args)\n}\n\nexport function requireOramaPluginMatchHighlight(callback: RequireCallback): void {\n  import('./index.js')\n    .then((loaded: OramaPluginMatchHighlight) => setTimeout(() => callback(undefined, loaded), 1))\n    .catch((error: Error) => setTimeout(() => callback(error), 1))\n}\n"],"names":["afterInsert","searchWithHighlight","saveWithHighlight","loadWithHighlight","requireOramaPluginMatchHighlight","_esmAfterInsert","_esmSearchWithHighlight","_esmSaveWithHighlight","_esmLoadWithHighlight","args","imported","apply","callback","then","loaded","setTimeout","undefined","catch","error"],"mappings":"AAAA,uFAAuF;;;;;;;;;;;;IAwBjEA,WAAW,MAAXA;IAYAC,mBAAmB,MAAnBA;IAWAC,iBAAiB,MAAjBA;IAWAC,iBAAiB,MAAjBA;IAWNC,gCAAgC,MAAhCA;;AAlDhB,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AAEG,eAAeR,YAEpB,GAAGS,IAAuC,EACP;IACnC,IAAI,CAACJ,iBAAiB;QACpB,MAAMK,WAAW,MAAM,MAAM,CAAC;QAC9BL,kBAAkBK,SAASV,WAAW;IACxC,CAAC;IAED,OAAOK,gBAAgBM,KAAK,CAAC,IAAI,EAAEF;AACrC;AAEO,eAAeR,oBACpB,GAAGQ,IAA+C,EACP;IAC3C,IAAI,CAACH,yBAAyB;QAC5B,MAAMI,WAAW,MAAM,MAAM,CAAC;QAC9BJ,0BAA0BI,SAAST,mBAAmB;IACxD,CAAC;IAED,OAAOK,2BAA2BG;AACpC;AAEO,eAAeP,kBACpB,GAAGO,IAA6C,EACP;IACzC,IAAI,CAACF,uBAAuB;QAC1B,MAAMG,WAAW,MAAM,MAAM,CAAC;QAC9BH,wBAAwBG,SAASR,iBAAiB;IACpD,CAAC;IAED,OAAOK,yBAAyBE;AAClC;AAEO,eAAeN,kBACpB,GAAGM,IAA6C,EACP;IACzC,IAAI,CAACD,uBAAuB;QAC1B,MAAME,WAAW,MAAM,MAAM,CAAC;QAC9BF,wBAAwBE,SAASP,iBAAiB;IACpD,CAAC;IAED,OAAOK,yBAAyBC;AAClC;AAEO,SAASL,iCAAiCQ,QAAyB,EAAQ;IAChF,MAAM,CAAC,cACJC,IAAI,CAAC,CAACC,SAAsCC,WAAW,IAAMH,SAASI,WAAWF,SAAS,IAC1FG,KAAK,CAAC,CAACC,QAAiBH,WAAW,IAAMH,SAASM,QAAQ;AAC/D"}