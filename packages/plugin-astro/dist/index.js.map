{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { AnyOrama, Orama, SearchParams } from '@orama/orama'\nimport { create as createOramaDB, insert as insertIntoOramaDB, save as saveOramaDB } from '@orama/orama'\nimport type { AstroConfig, AstroIntegration, RouteData } from 'astro'\nimport { compile } from 'html-to-text'\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs'\nimport path from 'node:path'\n\ninterface AstroPage {\n  pathname: string\n}\n\ninterface AstroConfigDoneArgs {\n  config: AstroConfig\n}\n\ninterface AstroBuildDoneArgs {\n  pages: AstroPage[]\n  routes: RouteData[]\n}\n\nconst isWindows = process.platform === 'win32'\nconst joinPath = (isWindows ? path.win32 : path).join\n\nexport const defaultSchema = {\n  path: 'string',\n  title: 'string',\n  h1: 'string',\n  content: 'string'\n} as const\n\nexport type PageIndexSchema = typeof defaultSchema\n\nexport interface OramaOptions {\n  language: string\n  /**\n   * Controls whether generatedFilePath is filter\n   * using case sensitive or case insensitive comparison\n   * @default false\n   *\n   */\n  caseSensitive?: boolean\n  pathMatcher: RegExp\n  contentSelectors?: string[]\n  searchOptions?: Omit<SearchParams<AnyOrama, any>, 'term'> | undefined\n}\n\nconst PKG_NAME = '@orama/plugin-astro'\n\nconst titleConverter = compile({\n  baseElements: { selectors: ['title'] }\n})\nconst h1Converter = compile({\n  baseElements: { selectors: ['h1'] }\n})\n\nasync function prepareOramaDb(\n  dbConfig: OramaOptions,\n  pages: AstroPage[],\n  routes: RouteData[]\n): Promise<Orama<PageIndexSchema, any, any, any>> {\n  const contentConverter = compile({\n    baseElements: {\n      selectors: dbConfig.contentSelectors?.length ? dbConfig.contentSelectors : ['body']\n    }\n  })\n\n  // All routes are in the same folder, we can use the first one to get the basePath\n  const baseUrl = routes[0].distURL?.pathname?.replace(/\\/$/, '').split('dist/').at(0) as string\n  const basePath = `${baseUrl}dist/`.slice(isWindows ? 1 : 0)\n  const pathsToBeIndexed = pages\n    .filter(({ pathname }) => dbConfig.pathMatcher.test(pathname))\n    .map(({ pathname }) => {\n      // Some pages like 404 are generated as 404.html while others are usually pageName/index.html\n      const matchingPathname = routes\n        .find(r => r.distURL?.pathname.endsWith(pathname.replace(/\\/$/, '') + '.html'))\n        ?.distURL?.pathname?.slice(isWindows ? 1 : 0)\n      return {\n        pathname,\n        generatedFilePath: matchingPathname ?? `${basePath}${pathname.replace(/\\/+$/, '')}/index.html`\n      }\n    })\n    .filter(({ generatedFilePath }) => !!generatedFilePath)\n\n  const oramaDB = await createOramaDB({\n    schema: defaultSchema,\n    ...(dbConfig.language ? { language: dbConfig.language } : undefined)\n  })\n\n  for (const { pathname, generatedFilePath } of pathsToBeIndexed) {\n    const htmlContent = readFileSync(generatedFilePath, { encoding: 'utf8' })\n\n    const title = titleConverter(htmlContent) ?? ''\n    const h1 = h1Converter(htmlContent) ?? ''\n    const content = contentConverter(htmlContent)\n\n    await insertIntoOramaDB(\n      oramaDB,\n      {\n        path: `/${pathname}`,\n        title,\n        h1,\n        content\n      },\n      dbConfig.language\n    )\n  }\n\n  return oramaDB\n}\n\nexport function createPlugin(options: Record<string, OramaOptions>): AstroIntegration {\n  let config: AstroConfig\n\n  return {\n    name: PKG_NAME,\n    hooks: {\n      'astro:config:done': function ({ config: cfg }: AstroConfigDoneArgs): void {\n        config = cfg\n      },\n      'astro:build:done': async function ({ pages, routes }: AstroBuildDoneArgs): Promise<void> {\n        const assetsDir = joinPath(config.outDir.pathname, 'assets').slice(isWindows ? 1 : 0)\n        if (!existsSync(assetsDir)) {\n          mkdirSync(assetsDir)\n        }\n\n        for (const [dbName, dbConfig] of Object.entries(options)) {\n          const namedDb = await prepareOramaDb(dbConfig, pages, routes)\n\n          writeFileSync(joinPath(assetsDir, `oramaDB_${dbName}.json`), JSON.stringify(await saveOramaDB(namedDb)), {\n            encoding: 'utf8'\n          })\n        }\n      }\n    }\n  }\n}\n\nexport default createPlugin\n"],"names":["create","createOramaDB","insert","insertIntoOramaDB","save","saveOramaDB","compile","existsSync","mkdirSync","readFileSync","writeFileSync","path","isWindows","process","platform","joinPath","win32","join","defaultSchema","title","h1","content","PKG_NAME","titleConverter","baseElements","selectors","h1Converter","prepareOramaDb","dbConfig","pages","routes","contentConverter","contentSelectors","length","baseUrl","distURL","pathname","replace","split","at","basePath","slice","pathsToBeIndexed","filter","pathMatcher","test","map","matchingPathname","find","r","endsWith","generatedFilePath","oramaDB","schema","language","undefined","htmlContent","encoding","createPlugin","options","config","name","hooks","cfg","assetsDir","outDir","dbName","Object","entries","namedDb","JSON","stringify"],"mappings":"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"}