{"version":3,"sources":["../src/client.ts"],"sourcesContent":["import type { AnyOrama, RawData } from '@orama/orama'\nimport { create as createOramaDB, load as loadOramaDB } from '@orama/orama'\n\nconst dbs: Record<string, AnyOrama> = {}\n\nexport async function getOramaDB<T extends AnyOrama>(dbName: string): Promise<T> {\n  if (dbName in dbs) {\n    return dbs[dbName] as T\n  }\n\n  const db = await createOramaDB({ schema: { _: 'string' } })\n\n  const dbResponse = await fetch(`/assets/oramaDB_${dbName}.json`)\n  const dbData = (await dbResponse.json()) as RawData\n\n  await loadOramaDB(db, dbData)\n  dbs[dbName] = db\n\n  return db as unknown as T\n}\n\nexport { search } from '@orama/orama'\n"],"names":["create","createOramaDB","load","loadOramaDB","dbs","getOramaDB","dbName","db","schema","_","dbResponse","fetch","dbData","json","search"],"mappings":"AACA,SAASA,UAAUC,aAAa,EAAEC,QAAQC,WAAW,QAAQ,eAAc;AAE3E,MAAMC,MAAgC,CAAC;AAEvC,OAAO,eAAeC,WAA+BC,MAAc,EAAc;IAC/E,IAAIA,UAAUF,KAAK;QACjB,OAAOA,GAAG,CAACE,OAAO;IACpB,CAAC;IAED,MAAMC,KAAK,MAAMN,cAAc;QAAEO,QAAQ;YAAEC,GAAG;QAAS;IAAE;IAEzD,MAAMC,aAAa,MAAMC,MAAM,CAAC,gBAAgB,EAAEL,OAAO,KAAK,CAAC;IAC/D,MAAMM,SAAU,MAAMF,WAAWG,IAAI;IAErC,MAAMV,YAAYI,IAAIK;IACtBR,GAAG,CAACE,OAAO,GAAGC;IAEd,OAAOA;AACT,CAAC;AAED,SAASO,MAAM,QAAQ,eAAc"}