import { create as esmCreate } from '../methods/create.js';
import { count as esmCount, getByID as esmGetByID } from '../methods/docs.js';
import { insert as esmInsert, insertMultiple as esminsertMultiple } from '../methods/insert.js';
import { remove as esmRemove, removeMultiple as esmRemoveMultiple } from '../methods/remove.js';
import { search as esmSearch } from '../methods/search.js';
import { searchVector as esmSearchVector } from '../methods/search-vector.js';
import { load as esmLoad, save as esmSave } from '../methods/serialization.js';
import { update as esmUpdate, updateMultiple as esmUpdateMultiple } from '../methods/update.js';
export declare function count(...args: Parameters<typeof esmCount>): ReturnType<typeof esmCount>;
export declare function create(...args: Parameters<typeof esmCreate>): ReturnType<typeof esmCreate>;
export declare function getByID(...args: Parameters<typeof esmGetByID>): ReturnType<typeof esmGetByID>;
export declare function insert(...args: Parameters<typeof esmInsert>): ReturnType<typeof esmInsert>;
export declare function insertMultiple(...args: Parameters<typeof esminsertMultiple>): ReturnType<typeof esminsertMultiple>;
export declare function load(...args: Parameters<typeof esmLoad>): ReturnType<typeof esmLoad>;
export declare function remove(...args: Parameters<typeof esmRemove>): ReturnType<typeof esmRemove>;
export declare function removeMultiple(...args: Parameters<typeof esmRemoveMultiple>): ReturnType<typeof esmRemoveMultiple>;
export declare function save(...args: Parameters<typeof esmSave>): ReturnType<typeof esmSave>;
export declare function search(...args: Parameters<typeof esmSearch>): ReturnType<typeof esmSearch>;
export declare function update(...args: Parameters<typeof esmUpdate>): ReturnType<typeof esmUpdate>;
export declare function updateMultiple(...args: Parameters<typeof esmUpdateMultiple>): ReturnType<typeof esmUpdateMultiple>;
export declare function searchVector(...args: Parameters<typeof esmSearchVector>): ReturnType<typeof esmSearchVector>;
export * as components from './components/defaults.cjs';
export * as internals from './internals.cjs';
