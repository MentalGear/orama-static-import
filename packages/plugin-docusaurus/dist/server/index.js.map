{"version":3,"sources":["../../src/server/index.ts"],"sourcesContent":["import type { LoadedContent, LoadedVersion } from '@docusaurus/plugin-content-docs'\nimport type { LoadContext, Plugin } from '@docusaurus/types'\nimport { create, insertMultiple, save } from '@orama/orama'\nimport { OramaWithHighlight, afterInsert as highlightAfterInsert } from '@orama/plugin-match-highlight'\nimport type { DefaultSchemaElement, NodeContent, PopulateFnContext } from '@orama/plugin-parsedoc'\nimport { defaultHtmlSchema, populate } from '@orama/plugin-parsedoc'\nimport * as githubSlugger from 'github-slugger'\nimport { cp, readFile, writeFile } from 'node:fs/promises'\nimport { resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { promisify } from 'node:util'\nimport { gzip as gzipCB } from 'node:zlib'\nimport type { Configuration as WebpackConfiguration } from 'webpack'\n\nimport { retrieveTranslationMessages } from './translationMessages.js'\nimport { INDEX_FILE, PLUGIN_NAME, PluginOptions, RawDataWithPositions, SectionSchema, schema } from './types.js'\n\nexport type { PluginData, PluginOptions, RawDataWithPositions, SectionSchema } from './types.js'\n\nconst gzip = promisify(gzipCB)\n\nfunction indexPath(outDir: string, version: string): string {\n  return resolve(outDir, INDEX_FILE.replace('@VERSION@', version))\n}\n\nexport function transformFn(node: NodeContent, context: PopulateFnContext): NodeContent {\n  let raw\n\n  switch (node.tag) {\n    case 'strong':\n    case 'a':\n    case 'time':\n    case 'code':\n    case 'span':\n    case 'small':\n    case 'b':\n    case 'p':\n    case 'ul':\n      raw = `<p>${node.content}</p>`\n      break\n    case 'h1':\n    case 'h2':\n    case 'h3':\n    case 'h4':\n    case 'h5':\n    case 'h6':\n      context.lastLink = node.properties?.id ?? githubSlugger.slug(node.content)\n      break\n  }\n\n  const transformed = {\n    ...node,\n    additionalProperties: {\n      hash: context.lastLink\n    }\n  }\n\n  if (raw) {\n    transformed.raw = raw\n  }\n\n  return transformed\n}\n\nexport function defaultToSectionSchema(\n  node: DefaultSchemaElement,\n  pageRoute: string,\n  sectionTitle: string,\n  version: string\n): SectionSchema {\n  const { content, type, properties } = node\n\n  if (!sectionTitle) {\n    sectionTitle = (pageRoute.split('/').pop() ?? '')\n      .replace(/(-)+/g, ' ')\n      .split(' ')\n      .map(word => word && `${word[0].toUpperCase()}${word.substring(1)}`)\n      .join(' ')\n  }\n\n  return {\n    pageRoute,\n    hash: (properties?.hash as string) ?? '',\n    sectionTitle: pageRoute ? sectionTitle : 'Home',\n    sectionContent: content,\n    type,\n    version\n  }\n}\n\nfunction isIndexable(doc: SectionSchema): boolean {\n  return (\n    !!doc.sectionContent && !!doc.sectionTitle && doc.type !== 'script' && !doc.pageRoute.startsWith('/blogs/tags/')\n  )\n}\n\nasync function generateDocument(\n  siteDir: string,\n  { title, version, permalink, source }: Record<string, string>\n): Promise<SectionSchema[]> {\n  // Parse the document\n  const data = await readFile(source.replace('@site', siteDir))\n  const fileType = source.split('.').at(-1)\n  const db = await create({ schema: defaultHtmlSchema })\n  await populate(db, data, fileType as 'html' | 'md', { transformFn })\n\n  // Convert all the documents to a\n  const sections = Object.values(db.data.docs.docs)\n    .map(node => {\n      return defaultToSectionSchema(node, permalink.slice(1), title, version)\n    })\n    .filter(isIndexable)\n\n  for (const section of sections) {\n    if (!section.pageRoute.startsWith('/')) {\n      section.pageRoute = '/' + section.pageRoute\n    }\n\n    if (section.hash) {\n      section.pageRoute += `#${section.hash}`\n    }\n  }\n\n  return sections\n}\n\nasync function buildDevSearchData(siteDir: string, outDir: string, allContent: any, version: string): Promise<void> {\n  const loadedVersion = allContent['docusaurus-plugin-content-docs']?.default?.loadedVersions?.find(\n    (v: LoadedVersion) => v.versionName === version\n  )\n  const docs = loadedVersion?.docs ?? []\n\n  const blogs: Array<Record<string, string>> =\n    allContent['docusaurus-plugin-content-blog']?.default?.blogPosts?.map(({ metadata }: any) => metadata) ?? []\n\n  const pages: Array<Record<string, string>> = allContent['docusaurus-plugin-content-pages']?.default ?? []\n\n  const generator = generateDocument.bind(null, siteDir)\n\n  // Gather all pages we want to index\n  const documents = [\n    ...(await Promise.all(docs.map(generator))),\n    ...(await Promise.all(blogs.map(generator))),\n    ...(await Promise.all(pages.map(generator)))\n  ].flat()\n\n  // Create the Orama database and then serialize it\n  const _db = await create({\n    schema,\n    components: {\n      afterInsert: [highlightAfterInsert]\n    }\n  })\n  const db = _db as OramaWithHighlight<typeof _db>\n\n  await insertMultiple(db, documents)\n\n  const serialized = (await save(db)) as RawDataWithPositions\n  serialized.positions = db.data.positions\n\n  await writeFile(indexPath(outDir, version), await gzip(JSON.stringify(serialized)))\n}\n\nfunction getThemePath(): string {\n  return fileURLToPath(new URL('../client/theme', import.meta.url))\n}\n\nfunction docusaurusOramaPlugin(context: LoadContext, options: PluginOptions): Plugin {\n  let versions: string[] = []\n\n  return {\n    name: PLUGIN_NAME,\n    getThemePath,\n    getPathsToWatch() {\n      return [getThemePath()]\n    },\n    getDefaultCodeTranslationMessages: async () => {\n      return retrieveTranslationMessages(context)\n    },\n    getClientModules() {\n      return [resolve(getThemePath(), 'SearchBar/style.css'), resolve(getThemePath(), 'SearchBarFooter/style.css')]\n    },\n    configureWebpack(): WebpackConfiguration {\n      return {\n        resolve: {\n          alias: {\n            'react/jsx-dev-runtime': 'react/jsx-dev-runtime.js',\n            'react/jsx-runtime': 'react/jsx-runtime.js'\n          }\n        }\n      }\n    },\n    async contentLoaded({ actions, allContent }) {\n      const isDevelopment = process.env.NODE_ENV === 'development'\n      const loadedVersions = (allContent['docusaurus-plugin-content-docs']?.default as LoadedContent)?.loadedVersions\n      versions = loadedVersions.map(v => v.versionName)\n\n      // Build all versions\n      await Promise.all(\n        versions.map(version => buildDevSearchData(context.siteDir, context.generatedFilesDir, allContent, version))\n      )\n\n      for (const name of versions) {\n        await buildDevSearchData(context.siteDir, context.generatedFilesDir, allContent, name)\n      }\n\n      if (isDevelopment) {\n        actions.setGlobalData({\n          searchData: Object.fromEntries(\n            await Promise.all(\n              versions.map(async version => {\n                return [version, await readFile(indexPath(context.generatedFilesDir, version))]\n              })\n            )\n          )\n        })\n      } else {\n        actions.setGlobalData({ searchData: {} })\n      }\n    },\n    async postBuild({ outDir }: { outDir: string }) {\n      await Promise.all(\n        versions.map(async version => {\n          return cp(indexPath(context.generatedFilesDir, version), indexPath(outDir, version))\n        })\n      )\n    }\n  }\n}\n\nexport default docusaurusOramaPlugin\n"],"names":["create","insertMultiple","save","afterInsert","highlightAfterInsert","defaultHtmlSchema","populate","githubSlugger","cp","readFile","writeFile","resolve","fileURLToPath","promisify","gzip","gzipCB","retrieveTranslationMessages","INDEX_FILE","PLUGIN_NAME","schema","indexPath","outDir","version","replace","transformFn","node","context","raw","tag","content","lastLink","properties","id","slug","transformed","additionalProperties","hash","defaultToSectionSchema","pageRoute","sectionTitle","type","split","pop","map","word","toUpperCase","substring","join","sectionContent","isIndexable","doc","startsWith","generateDocument","siteDir","title","permalink","source","data","fileType","at","db","sections","Object","values","docs","slice","filter","section","buildDevSearchData","allContent","loadedVersion","default","loadedVersions","find","v","versionName","blogs","blogPosts","metadata","pages","generator","bind","documents","Promise","all","flat","_db","components","serialized","positions","JSON","stringify","getThemePath","URL","url","docusaurusOramaPlugin","options","versions","name","getPathsToWatch","getDefaultCodeTranslationMessages","getClientModules","configureWebpack","alias","contentLoaded","actions","isDevelopment","process","env","NODE_ENV","generatedFilesDir","setGlobalData","searchData","fromEntries","postBuild"],"mappings":"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"}